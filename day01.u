-- part 1

day01.appendLineValues : ([Nat], [Nat]) -> Text -> {Exception} ([Nat], [Nat])
day01.appendLineValues lists line =
  (a, b) = lists
  numStrs = splitOn whitespace line
  nums = List.map Nat.fromText numStrs
  match nums with
    [Some n, Some m] -> (a :+ n, b :+ m)
    _                -> Exception.raise (Generic.failure "can't parse line " line)

day01.parseInput : Text -> {Exception} ([Nat], [Nat])
day01.parseInput text = List.foldLeft day01.appendLineValues ([], []) (lines text)

test> day01.parseInput.tests.simple = test.verify do
  input = """
  1   2
  3   4
  """
  expected = ([1,3], [2,4])
  test.ensureEqual (day01.parseInput input) expected

day01.sortLists : ([Nat], [Nat]) -> ([Nat], [Nat])
day01.sortLists lists =
  (a, b) = lists
  (List.sort a, List.sort b)

day01.diffs : ([Nat], [Nat]) -> [Nat]
day01.diffs lists =
  (a, b) = lists
  List.zipWith (n m -> Int.abs (Nat.toInt(n) Int.- Nat.toInt(m))) a b

day01.part1.solve : Text -> {Exception} Text
day01.part1.solve input =
  input
    |> day01.parseInput
    |> day01.sortLists
    |> day01.diffs
    |> sum
    |> Nat.toText

day01.sampleInput = """
  3   4
  4   3
  2   5
  1   3
  3   9
  3   3
  """

test> day01.part1.solve.tests.example = test.verify do
  test.ensureEqual (day01.part1.solve day01.sampleInput) "11"

day01.part1 : '{IO, Exception} ()
day01.part1 = do
  submitSolution (Day 1) (Part 1) day01.part1.solve

-- part 2

day01.calcCounts : [Nat] -> NatMap Nat
day01.calcCounts nats =
  nats
    |> List.groupBy id 
    |> Map.map List.Nonempty.size
    |> NatMap.fromMap

test> day01.calcCounts.tests.simple =
  check ((calcCounts [3, 5, 3, 2, 1, 3, 1, 3]) === (NatMap.fromList [
    (1, 2),
    (2, 1),
    (3, 4),
    (5, 1)
  ]))

day01.counts : ([Nat], [Nat]) -> (NatMap Nat, NatMap Nat)
day01.counts lists =
  (a, b) = lists
  (calcCounts a, calcCounts b)

day01.similarityScores : (NatMap Nat, NatMap Nat) -> [Nat]
day01.similarityScores maps =
  (a, b) = maps
  score n count1 =
    count2 = NatMap.getOrElse n 0 b
    n * count1 * count2
  NatMap.mapWithKey score a |> NatMap.values

day01.part2.solve : Text -> {Exception} Text
day01.part2.solve input =
  input
    |> day01.parseInput
    |> day01.counts
    |> day01.similarityScores
    |> sum
    |> Nat.toText

test> day01.part2.solve.tests.example = test.verify do
  test.ensureEqual (day01.part2.solve day01.sampleInput) "31"

day01.part2 : '{IO, Exception} ()
day01.part2 = do
  submitSolution (Day 1) (Part 2) day01.part2.solve
